import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
import Footer from "../../../components/Footer";
import Header from "../../../components/Header";
import styles from "../../../styles/Projects.module.scss";

interface ProjectI {
    id: number;
    title: string;
    tags: string[];
    content: string;
    img: string;
}

const Projects: NextPage<{ projects: ProjectI[]; page: number }> = ({
    projects,
    page,
}) => {
    const isNextPage = Math.ceil(projects.length / 4) > page + 1;
    const router = useRouter();
    const projectsList = projects
        .slice(page * 4, page * 4 + 4)
        .map((project) => (
            <ProjectElement project={project} key={project.id} />
        ));
    return (
        <div className={styles.container}>
            <Head>
                <title>Portfolio | Delta Storm</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Header />
            <main className={styles.main}>
                <h2>Portfolio</h2>
                <div className={styles.projectsWrapper}>{projectsList}</div>
            </main>
            <nav className={styles.navButtons}>
                <button
                    className={`${styles.navButton} ${styles.active}`}
                    onClick={() =>
                        page === 1
                            ? router.push(`/projects`)
                            : router.push(`/projects/page/${page - 1}`)
                    }
                >{`<`}</button>
                <button
                    className={
                        isNextPage
                            ? `${styles.navButton} ${styles.active}`
                            : `${styles.navButton}`
                    }
                    onClick={() =>
                        isNextPage
                            ? router.push(`/projects/page/${page + 1}`)
                            : ""
                    }
                >{`>`}</button>
            </nav>
            <Footer />
        </div>
    );
};

const ProjectElement: NextPage<{ project: ProjectI }> = ({ project }) => {
    const { id, title, tags, img } = project;
    const tagList = tags.map((tag, i) => (
        <div className={styles.tag} key={i}>
            {tag}
        </div>
    ));
    return (
        <div className={styles.projectWrapper}>
            <div className={styles.content}>
                <h3>{title}</h3>
                <h4>Technologie</h4>
                <div className={styles.tags}>{tagList}</div>
            </div>
            <div className={styles.imageWrapper}>
                <Image
                    src={`${img}`}
                    layout="fill"
                    alt="ZdjÄ™cie projektu"
                ></Image>
            </div>
        </div>
    );
};

export const getServerSideProps: GetServerSideProps<{
    projects: ProjectI[];
    page: number;
}> = async (context) => {
    const response = await fetch("https://deltastorm.pl/data/portfolio.json");
    const projects = await response.json();
    if (!context.params) {
        return { props: { projects, page: 0 } };
    }
    const page = Number(context.params.page);
    return { props: { projects, page } };
};

export default Projects;
